# Generated by Django 5.1.5 on 2025-03-24 11:07

import django.core.validators
import django.utils.timezone
import modules.system.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с таким именем уже существует.'}, help_text='Обязательно. 6-50 символов. Только буквы, цифры и подчеркивания.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Имя пользователя может содержать только буквы, цифры и подчеркивания.', regex='^[a-zA-Z0-9_]+$')], verbose_name='имя пользователя')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким email уже существует.'}, max_length=254, unique=True, verbose_name='адрес электронной почты')),
                ('desired_sleep_hours', models.PositiveSmallIntegerField(default=8, help_text='Желаемое количество часов сна в сутки', verbose_name='желаемое количество часов сна')),
                ('date_of_birth', models.DateField(blank=True, help_text='Дата рождения пользователя', null=True, verbose_name='дата рождения')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский'), ('O', 'Другой')], help_text='Пол пользователя', max_length=10, null=True, verbose_name='пол')),
                ('profile_picture', models.ImageField(blank=True, help_text='Загрузите фотографию профиля', null=True, upload_to='profile_pics/', verbose_name='фотография профиля')),
                ('phone_number', models.CharField(blank=True, help_text='Номер телефона для связи', max_length=15, null=True, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')], verbose_name='номер телефона')),
                ('language', models.CharField(choices=[('en', 'Английский'), ('ru', 'Русский')], default='ru', help_text='Предпочитаемый язык интерфейса', max_length=10, verbose_name='язык')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', modules.system.managers.UserManager()),
            ],
        ),
    ]
